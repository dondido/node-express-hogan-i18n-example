{
  "name": "error-handler",
  "version": "1.0.0",
  "author": {
    "name": "Luc Thevenard",
    "email": "lucthevenard@gmail.com"
  },
  "description": "A module for gracefully handling server errors.",
  "main": "errorHandler.js",
  "scripts": {
    "test": "jasmine-node --verbose --captureExceptions test/",
    "example": "npm install -d && node example/example.js | ./node_modules/.bin/bunyan -o short"
  },
  "keywords": [
    "error",
    "handler",
    "domain"
  ],
  "devDependencies": {
    "request": "~2.33.0",
    "bunyan": "~0.22.1",
    "jasmine-node": "^1.13.1"
  },
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/lucthev/error-handler.git"
  },
  "bugs": {
    "url": "https://github.com/lucthev/error-handler/issues"
  },
  "license": "MIT",
  "readme": "# error-handler\n\nerror-handler is a [Node.js](http://nodejs.org) module for handling server errors in a graceful manner.\n\n## Installation\n\n```\n$ npm install error-handler\n```\n\n## Usage\n\nHonestly, there's not much to it. Feel free to skip to the example.\n\n### ErrorHandler( request, response [, handler, notFatal] )\n\nHandle errors relating to the current `request` and `response`. \n\n`handler` is a function which is passed the relevant `request`, `response`, and `error`, in that order, and should probably log the error and/or send a nice error page. If no handler is given, defaults to logging the error via `console.error( )` and sending a plain `Server error.` message. That's ugly.\n\nBy default, error-handler exits the process in which the error occured, once the error has been dealt with. If `notFatal` is true, this behaviour gets overridden. Note that this works as long as `notFatal` is truthy; so, if you want to make it a little more clear what you're doing, you could pass in a String of some kind (e.g. `'Not fatal.'`).\n\n## Example\n\nHere's a simple example using [bunyan](https://github.com/trentm/node-bunyan) for logging and Node's [Cluster](http://nodejs.org/api/cluster.html) module to restart worker processes on exit. This example is included in the [example](https://github.com/lucthev/error-handler/tree/master/example) folder.\n\n```javascript\nvar handleErrors = require('error-handler'),\n    http = require('http'),\n    bunyan = require('bunyan'),\n    cluster = require('cluster')\n\n// NOTE: in real life, you'd probably want to put the master and worker\n// scripts in separate files.\n\nif (cluster.isMaster) {\n\n  // Spawn a worker.\n  cluster.fork()\n\n  // We'll use bunyan for logging.\n  var logger = bunyan.createLogger({\n    name: 'example',\n    level: 'trace',\n    master: true\n  })\n\n  // Spawn another worker when one dies.\n  cluster.on('exit', function (worker, code, signal) {\n    logger.warn('Worker ' + worker.id + ' died.')\n\n    cluster.fork()\n  })\n\n} else if (cluster.isWorker) {\n\n  var logger = bunyan.createLogger({\n    name: 'example',\n    level: 'trace'\n  })\n\n  // The error handling function. Maybe render or send an error page\n  // in here. At any rate, please do better than this.\n  function errorHandler (req, res, err) {\n    req.log.error({ err: err }, err.stack)\n\n    res.writeHead(500, {'Content-Type': 'text/html'})\n    res.end(\n      '<html>' +\n        '<head><title>Error</title></head>' +\n        '<body><p style=\"white-space: pre\">' + err.stack + '</p></body>' +\n      '</html>'\n    )\n  }\n\n  var server = http.createServer(function (req, res) {\n\n    req.log = res.log = logger.child()\n\n    // This takes care of errors. You'll want to call this ASAP.\n    handleErrors(req, res, errorHandler)\n\n    /**\n     *\n     * Put your application logic here.\n     *\n     */\n\n    // For illustration purposes only.\n    throw new Error('Some error from something.')\n  })\n\n  server.listen(3000, function () {\n    logger.info('Worker ' + cluster.worker.id + ' listening.')\n  })\n}\n```\n\n## License\n\n[MIT](https://github.com/lucthev/error-handler/blob/master/LICENSE.txt)",
  "homepage": "https://github.com/lucthev/error-handler",
  "_id": "error-handler@1.0.0",
  "_shasum": "2bb5b0c08b774f33f889a59ae07920ec55af8e17",
  "_from": "error-handler@",
  "_resolved": "https://registry.npmjs.org/error-handler/-/error-handler-1.0.0.tgz"
}
